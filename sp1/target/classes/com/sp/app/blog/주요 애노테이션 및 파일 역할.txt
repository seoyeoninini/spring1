-- --------------------------------------------
※ Controller
   ● 개요
       - 클라이언트의 요청(request) 받는다.
       - 필요한 비즈니스 로직을 호출하여 처리 결과(Model)와 처리 결과를 출력할 View 정보를 DispatherServlet에 반환
       - @RequestMapping, @GetMapping, @PostMapping 을 이용하여 url을 class 또는 메소드와 mapping
       - 주소 매핑 메소드의 주요 리턴 타입
         ModelAndView : 컨트롤러의 처리 결과를 전달할 뷰의 이름과 뷰에 전달할 모델을 가지고 있다.
         String : 뷰의 이름을 반환
         Map : 모델을 반환. 응답을 JSON으로 반환할때 사용
         void, Model 등
       - 주소 매핑 메소드의 인수
         Model : 뷰에 전달할 모델
         SessionStatus : @SessionAttributes를 사용해 세션에 저장한 모델이 더 이상 필요없어질 경우 세션에서 제거할 경우 사용
         RedirectAttributes : 리다이렉트된 페이지에 값을 전달하기 위해 사용
         HttpServletRequest, HttpServletResponse, HttpSession 등


   ● Controller 관련 애노테이션
     - @Controller
         : 스테레오 타입 애노테이션
         : Spring MVC에서 컨트롤러로 인식 - 클라이언트의 요청 받는다.
         : 필요한 비즈니스 로직을 호출하여 처리 결과(Model)와 처리 결과를 출력할 View 정보를 DispatherServlet에 반환

     - @RestController
         : @RestController는 @Controller에 @ResponseBody가 추가된 애노테이션
         : 스프링 4.0부터 지원
         : REST 방식의 데이터 처리를 위해 사용하는 애노테이션

     - @RequestMapping
         : url을 class 또는 메소드와 mapping
         : value 속성 : 주소 설정, method : 요청 메소드설정(GET, POST)
         : produces 속성 : response의 Content-Type를 제어
           @RequestMapping(value="insert", method=RequestMethod.POST,
                     produces="application/json;charset=utf-8")
 
     - @GetMapping : 스프링 4.3 사용 가능
        : url을 class 또는 메소드와 mapping
        : GET 요청 매핑

     - @PostMapping : 스프링 4.3 사용 가능
        : url을 class 또는 메소드와 mapping
        : POST 요청 매핑

     - @RequestParam
        : Controller 메소드의 파라미터와 웹 요청 파라미터를 매핑하기 위한 애노테이션
        : name(value) 속성 - 파라미터 이름
        : defaultValue 속성 - 해당 파라미터의 기본값
        : name 속성을 생략하면 스프링 6.x 부터는 경고 또는 에러가 발생할 수 있음

     - @ResponseBody
        : 핸들러 메소드에서 @ResponseBody 애노테이션이 적용된 경우 반환 객체를 HTTP 응답으로 전송

     - @RequestBody
        : HTTP 요청 몸체를 자바 객체로 전달받음
        : HTTP 요청의 body 내용을 자바 객체로 매핑하는 역할
        : POST 형식으로 응답 받는 경우에만 사용할 수 있다. 

     - @ModelAttribute
        : Controller 메소드의 파라미터나 리턴 값을 Model 객체와 바인딩 하기 위한 애노테이션
        : 실제적으로 ModelMap.addAttribute(이름, 값)와 같은 기능을 함

     - @SessionAttributes
        : Model 객체를 세션에 저장하고 사용하기 위한 애노테이션
        : 클래스 레벨(type level)에서 선언 가능
        : 지속적으로 사용자의 입력 값을 유지시키기나 여러 단계에 걸쳐 submit 되면서 완성되는 폼을 구성하는 경우에 사용 가능

     - @PathVariable
       : 메소드 매개 변수가 URI 템플릿 변수에 바인딩되어야 함을 나타내는 애노테이션 

     - @CrossOrigin
        : CORS(Cross-origin resource sharing)란?
          웹 페이지의 제한된 자원을 외부 도메인에서 접근을 허용해주는 메커니즘
        : CORS를 스프링을 통해 설정할 수 있는 기능.
        : Spring 4.3 부터 지원
        : @CrossOrigin 어노테이션을 붙여주면 기본적으로 
          '모든 도메인, 모든 요청방식' 에 대해 허용 한다는 뜻이다.
        : 속성 중 origins는 허용할 도메인을 나타낸다. 
          복수개일 경우 콤마로 구분하여 넣어주면 된다.
          @CrossOrigin(origins = "http://domain1.com, http://domain2.com") 


-- --------------------------------------------
※ 서비스 및 의존성 주입
   ● Service
       - 비지니스 로직을 처리
     
   ● 서비스 객체 생성 및 의존성 주입
       - @Service
         : 스테레오 타입 애노테이션(객체 생성)
         : 비지니스 로직을 처리하는 클래스에서 사용

      - @Autowired
        : 타입으로 의존성을 주입

      - @Qualifier
        : @Autowired와 같이 사용
        : 이름을 이용하여 의존성 주입
        : 타입이 일치하는 객체가 여러개 존재하는 경우에 사용


-- --------------------------------------------
※ Mapper / DAO
   1) interface를 매퍼로 등록하기 위해 사용
      - @Mapper
         : interface를 매퍼로 등록하기 위해 사용
         : MyBatis 3.4.0 에서 추가
         : @Mapper 어노테이션을 선언한 interface를 생성하면 따로 implements(구현) 생략
         : @Mapper 어노테이션을 선언한 인터페이스 메소드 이름과 MyBatis Mapper에 작성한 Sql ID는 반드시 일치해야 함
         : MyBatis mapper의 namespace는 인터페이스의 풀 패키지 경로를 입력
         : <mybatis:scan/>, @MapperScan 에서  base-package / basePackages 프로퍼티만 사용할 때는
           @Mapper 어노테이션을 사용하지 않아도 자동으로 패키지 하위의 인터페이스는 매퍼로 등록
         : @Repository 를 사용해도 가능하며, @Mapper를 생략해도 가능

   2) SqlSession 객체를 이용하여 mapper의 쿼리를 실행
       - SqlSession 의 주요 메소드
          insert(), update(), delete(), selectOne(), selectList()
       - 주요 애노테이션
         @Repository
           : 해당 객체는 자동으로 빈 등록
           : DAO 클래스에서 사용
           : DB Exception을 DataAccessException으로 변환   
           : SqlSession을 이용하여 DB작업할 때 사용
 

-- --------------------------------------------
※ MyBatis mapper(XML)
   - SQL 를 작성
   - @Mapper 어노테이션 사용하는 경우
     @Mapper를 선언한 인터페이스 메소드 이름과 MyBatis Mapper에 작성한 Sql ID는 반드시 일치해야 함
   - SqlSession 객체를 사용하는 경우
     DAO 메소드에서 "네임스페이스.아이디"를 이용하여 해당 쿼리 검색하여 실행


-- --------------------------------------------
※ JSP
   - 뷰 작성

